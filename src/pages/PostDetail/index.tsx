import { CommentOutlined, LikeOutlined } from '@ant-design/icons'
import {
  Avatar,
  Button,
  Card,
  Form,
  Input,
  List,
  Space,
  Tag,
  Typography,
} from 'antd'
import { marked } from 'marked'
import React, { useState } from 'react'
import { useParams } from 'react-router-dom'
import './style.css'

// ÂºïÂÖ•Èò≤Ê≠¢xssÊîªÂáªÁöÑÂ∫ì
import DOMPurify from 'dompurify'

const text =
  "# Êé¢Á¥¢‰∫∫Â∑•Êô∫ËÉΩÁöÑÊú™Êù• üöÄ \n *‰ΩúËÄÖÔºöÊú™Êù•Êé¢Á¥¢ËÄÖ* \n *ÂèëÂ∏ÉÊó•ÊúüÔºö2024 Âπ¥ 12 Êúà 21 Êó•* \n > **‚Äú‰∫∫Â∑•Êô∫ËÉΩ‰∏ç‰ºöÂèñ‰ª£‰∫∫Á±ªÔºå‰ΩÜ‰ºöÂèñ‰ª£ÈÇ£‰∫õ‰∏ç‰ºö‰ΩøÁî®‰∫∫Â∑•Êô∫ËÉΩÁöÑ‰∫∫„ÄÇ‚Äù** \n > ‚Äî‚Äî ‰∏Ä‰ΩçÊú™Êù•Â≠¶ÂÆ∂ \n Âú®ËøáÂéªÁöÑÂçÅÂπ¥‰∏≠Ôºå‰∫∫Â∑•Êô∫ËÉΩÔºàAIÔºâ‰ªéÁßëÂπªÂ∞èËØ¥ÁöÑÊÑøÊôØËµ∞Ëøõ‰∫ÜÊàë‰ª¨ÁöÑÊó•Â∏∏ÁîüÊ¥ª„ÄÇ‰ªéÊé®ËçêÁîµÂΩ±ÁöÑÁÆóÊ≥ïÂà∞Ëá™Âä®È©æÈ©∂ÁöÑÊ±ΩËΩ¶ÔºåAI Â∑≤ÁªèÊ∏óÈÄèÂà∞ÂêÑ‰∏™È¢ÜÂüü„ÄÇÈÇ£‰πàÔºåÊú™Êù•ÁöÑ‰∫∫Â∑•Êô∫ËÉΩ‰ºöÂ∏¶ÁªôÊàë‰ª¨‰ªÄ‰πàÔºüÊú¨ÊñáÂ∞Ü‰ªé‰∏â‰∏™ÊñπÈù¢Êé¢ËÆ®Ëøô‰∏ÄÈóÆÈ¢ò„ÄÇ \n ## üåü 1. AI Âú®Êó•Â∏∏ÁîüÊ¥ª‰∏≠ÁöÑÂ∫îÁî®\n - ÂÆâÊéíÊó•Á®ã üìÖ \n **Á§∫‰æã‰ª£Á†ÅÔºö** \n ```javascript\nconst assistant = new AI('ChatGPT');  "
const { TextArea } = Input
const { Title, Paragraph } = Typography

const PostDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>()
  const [commentValue, setCommentValue] = useState('')

  // Ê®°ÊãüÊñáÁ´†Êï∞ÊçÆ
  const post = {
    id,
    title: '‰∫∫Â∑•Êô∫ËÉΩÁöÑÊú™Êù•',
    content: text,
    author: {
      username: 'ÊäÄÊúØ‰∏ìÂÆ∂',
      avatar: 'https://joeschmoe.io/api/v1/random',
    },
    tags: ['React', 'TypeScript', 'ÂâçÁ´ØÂºÄÂèë', 'ÊúÄ‰Ω≥ÂÆûË∑µ'],
    createdAt: new Date(),
    likes: 42,
    comments: [
      {
        id: '1',
        author: {
          username: 'ËØÑËÆ∫ËÄÖ1',
          avatar: 'https://joeschmoe.io/api/v1/random',
        },
        content: 'ÊñáÁ´†ÂÜôÂæóÂæàÂ•ΩÔºåÂØπÊàëÂ∏ÆÂä©ÂæàÂ§ßÔºÅ',
        createdAt: new Date(),
      },
      {
        id: '1',
        author: {
          username: 'ËØÑËÆ∫ËÄÖ1',
          avatar: 'https://joeschmoe.io/api/v1/random',
        },
        content: 'ÊñáÁ´†ÂÜôÂæóÂæàÂ•ΩÔºåÂØπÊàëÂ∏ÆÂä©ÂæàÂ§ßÔºÅ',
        createdAt: new Date(),
      },
      {
        id: '1',
        author: {
          username: 'ËØÑËÆ∫ËÄÖ1',
          avatar: 'https://joeschmoe.io/api/v1/random',
        },
        content: 'ÊñáÁ´†ÂÜôÂæóÂæàÂ•ΩÔºåÂØπÊàëÂ∏ÆÂä©ÂæàÂ§ßÔºÅ',
        createdAt: new Date(),
      },
      {
        id: '1',
        author: {
          username: 'ËØÑËÆ∫ËÄÖ1',
          avatar: 'https://joeschmoe.io/api/v1/random',
        },
        content: 'ÊñáÁ´†ÂÜôÂæóÂæàÂ•ΩÔºåÂØπÊàëÂ∏ÆÂä©ÂæàÂ§ßÔºÅ',
        createdAt: new Date(),
      },
      {
        id: '1',
        author: {
          username: 'ËØÑËÆ∫ËÄÖ1',
          avatar: 'https://joeschmoe.io/api/v1/random',
        },
        content: 'ÊñáÁ´†ÂÜôÂæóÂæàÂ•ΩÔºåÂØπÊàëÂ∏ÆÂä©ÂæàÂ§ßÔºÅ',
        createdAt: new Date(),
      },
    ],
  }
  const renderMarkdown = (content: string): string => {
    const markedContent = marked(content) as string // ËΩ¨Êç¢‰∏∫ HTML
    return DOMPurify.sanitize(markedContent)
  }

  const handleComment = () => {
    if (!commentValue) return
    // ËøôÈáåÂ§ÑÁêÜËØÑËÆ∫Êèê‰∫§
    setCommentValue('')
  }

  return (
    <div className="post-detail">
      <Title level={1}>{post.title}</Title>
      <div className="post-meta">
        <Space>
          <Avatar src={post.author.avatar} />
          <span className="author">{post.author.username}</span>
          <span className="date">
            {new Date(post.createdAt).toLocaleDateString()}
          </span>
        </Space>
        <Space className="actions">
          <Button type="text" icon={<LikeOutlined />}>
            {post.likes} ÁÇπËµû
          </Button>
          <Button type="text" icon={<CommentOutlined />}>
            {post.comments.length} ËØÑËÆ∫
          </Button>
        </Space>
      </div>

      <div>
        {post.tags.map((tag) => (
          <Tag key={tag}>{tag}</Tag>
        ))}
      </div>
      <Paragraph className="post-text">
        <p
          dangerouslySetInnerHTML={{ __html: renderMarkdown(post.content) }}
        ></p>
      </Paragraph>

      <div className="post-comments">
        <div className="post-comments-inner">
          <div className="post-comments-header">
            <Title level={3} className="post-comments-title">
              ËØÑËÆ∫ ({post.comments.length})
            </Title>
          </div>
          <Card bordered={false}>
            <Form.Item className="comment-textarea">
              <TextArea
                rows={1}
                value={commentValue}
                onChange={(e) => setCommentValue(e.target.value)}
                placeholder="ÂÜô‰∏ã‰Ω†ÁöÑËØÑËÆ∫..."
                autoSize={{ minRows: 1, maxRows: 6 }}
              />
              {commentValue && (
                <Button
                  type="primary"
                  onClick={handleComment}
                  style={{ marginTop: 8 }}
                >
                  Êèê‰∫§ËØÑËÆ∫
                </Button>
              )}
            </Form.Item>

            <div className="comment-list-container">
              <List
                className="comment-list"
                itemLayout="horizontal"
                dataSource={post.comments}
                renderItem={(comment) => (
                  <List.Item>
                    <div className="comment-item">
                      <Avatar src={comment.author.avatar} />
                      <div className="comment-content">
                        <div className="comment-header">
                          <span className="comment-author">
                            {comment.author.username}
                          </span>
                          <span className="comment-date">
                            {new Date(comment.createdAt).toLocaleString()}
                          </span>
                        </div>
                        <div className="comment-text">{comment.content}</div>
                      </div>
                    </div>
                  </List.Item>
                )}
              />
            </div>
          </Card>
        </div>
      </div>
    </div>
  )
}

export default PostDetail
